#!/usr/bin/env python3

import sys
import socket
import select
import json
import random
import time

# Your ID number
my_id = sys.argv[1]
# The ID of the leader
leader_id = '0000'
# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

MAJORITY = ((len(replica_ids) + 1) // 2) + 1

coef = int(my_id[3])
ELECTION_TIMEOUT = 300 + (coef * 10)
HEARTBEAT_TIME = 150
SELECT_WAIT = 0.01
last_heartbeat = time.time()
last_append = time.time()
start_time = time.time()

TERMINATOR = b'}\n'
buffer = b''

LEADER = 'leader'
CANDIDATE = 'candidate'
FOLLOWER = 'follower'

server_state = FOLLOWER

# STATE
# persistent state on all servers
current_term = 0
voted_for = None
log = [{'term': 0}]
# extra
database = {}

# volatile state on all servers
commit_index = 0
last_applied = 0
# extra
votes = []

# volatile state on all leaders
next_indexes = {}
match_indexes = {}


def recv_msgs():
    global buffer

    fresh_buf = sock.recv(16384)

    # is this sock shutting down?
    if len(fresh_buf) == 0:
        return None

    buffer += fresh_buf

    msgs = []
    while TERMINATOR in buffer:
        position = buffer.find(TERMINATOR) + len(TERMINATOR)
        # -1 to remove the \n, which json.loads won't want
        content = json.loads(buffer[:position - 1].decode())
        msgs.append(content)
        buffer = buffer[position:]
    return msgs


def send_msg(msg):
    sock.send(json.dumps(msg).encode() + b'\n')
    passed = time.time() - start_time
    print('Replica %s sent at %f:\n%s\n' %
          (my_id, passed, json.dumps(msg, indent=2)))


def create_msg(dst, type, mid):
    msg = {
        'src': my_id,
        'dst': dst,
        'leader': leader_id,
        'type': type,
        'MID': mid
    }
    return msg


def handle_get_msg(msg):
    response = None
    if server_state == LEADER:
        key = msg['key']
        response = create_msg(msg['src'], 'ok', msg['MID'])
        if key in database:
            response['value'] = database[key]
        else:
            response['value'] = ''
    else:
        response = create_msg(msg['src'], 'redirect', msg['MID'])
    send_msg(response)


def handle_put_msg(msg):
    if server_state == LEADER:
        log.append(
            {'term': current_term,
             'key': msg['key'],
             'value': msg['value'],
             'client': msg['src'],
             'MID': msg['MID']})
        send_append_entries(replica_ids, False)
    else:
        response = create_msg(msg['src'], 'redirect', msg['MID'])
        send_msg(response)


def send_append_entries(to_send, required):
    if server_state != LEADER:
        return
    for id in to_send:
        next_index = next_indexes[id]
        prev_log_index = next_index - 1
        print('Replica %s: id: %s, %d %d' %
              (my_id, id, prev_log_index, len(log)))
        prev_log_term = log[prev_log_index]['term']
        entries = log[next_index:]
        msg = {
            'src': my_id,
            'dst': id,
            'type': 'append_entries',
            'term': current_term,
            'leader': leader_id,
            'prev_log_index': prev_log_index,
            'prev_log_term': prev_log_term,
            'entries': entries,
            'leader_commit': commit_index
        }
        send_msg(msg)


def apply_commits():
    global last_applied
    global commit_index
    while last_applied < commit_index:
        last_applied += 1
        key = log[last_applied]['key']
        value = log[last_applied]['value']
        database[key] = value
        if server_state == LEADER:
            client = log[last_applied]['client']
            mid = log[last_applied]['MID']
            response = create_msg(client, 'ok', mid)
            send_msg(response)


def handle_grant_append_msg(msg):
    global commit_index

    if server_state != LEADER:
        return
    id = msg['src']
    next_indexes[id] = msg['next_index']
    match_indexes[id] = msg['next_index'] - 1

    i = len(log) - 1
    while i >= 0:
        if log[i]['term'] == current_term:
            count = 0
            for id in match_indexes:
                if match_indexes[id] >= i:
                    count += 1
            if count >= MAJORITY - 1:
                break
        i -= 1
    if i > commit_index:
        commit_index = i
        apply_commits()


def handle_reject_append_msg(msg):
    if server_state != LEADER:
        return

    id = msg['src']
    next_indexes[id] = next_indexes[id] - 1
    send_append_entries([id], True)


def handle_request_vote_msg(msg):
    global server_state
    global voted_for
    global votes
    global current_term
    global last_append
    global leader_id

    if msg['term'] >= current_term:
        current_term = msg['term']
        server_state = FOLLOWER
        leader_id = msg['leader']
        votes = []
        voted_for = None

    if server_state == FOLLOWER:
        grant = {
            'src': my_id,
            'dst': msg['src'],
            'leader': leader_id,
            'type': 'grant_vote',
            'term': current_term
        }

        reject = {
            'src': my_id,
            'dst': msg['src'],
            'leader': leader_id,
            'type': 'reject_vote',
            'term': current_term
        }

        if msg['term'] < current_term:
            send_msg(reject)
            return
        if not (voted_for is None or voted_for == msg['src']):
            send_msg(reject)
            return
        if len(log) - 1 > msg['last_log_index']:
            send_msg(reject)
            return
        if log[len(log) - 1]['term'] > msg['last_log_term']:
            send_msg(reject)
            return
        send_msg(grant)


def handle_grant_vote_msg(msg):
    global leader_id
    global votes
    global server_state
    global next_indexes
    global match_indexes
    if server_state != CANDIDATE:
        return
    if msg['src'] not in votes:
        votes.append(votes)
        if len(votes) >= MAJORITY:
            print('Replica %s is the new leader' % my_id)
            server_state = LEADER
            leader_id = my_id
            votes = []
            next_indexes = {}
            match_indexes = {}
            for id in replica_ids:
                next_indexes[id] = len(log)
                match_indexes[id] = 0


def handle_reject_vote_msg(msg):
    global server_state
    global voted_for
    global votes
    global current_term

    if server_state == CANDIDATE and msg['term'] >= current_term:
        current_term = msg['term']
        server_state = FOLLOWER
        votes = []
        voted_for = None


def handle_append_entries_msg(msg):
    global current_term
    global commit_index
    global log
    global server_state
    global leader_id
    global votes
    global voted_for
    global last_append

    if msg['term'] >= current_term:
        current_term = msg['term']
        server_state = FOLLOWER
        leader_id = msg['leader']
        votes = []
        voted_for = None

    if server_state == FOLLOWER:
        if msg['term'] < current_term:
            return

        last_append = time.time()

        prev_log_index = msg['prev_log_index']
        prev_log_term = msg['prev_log_term']
        if len(log) - 1 < prev_log_index or log[prev_log_index]['term'] != prev_log_term:
            reject = {
                'src': my_id,
                'dst': msg['src'],
                'leader': leader_id,
                'type': 'reject_append',
                'term': current_term,
                'prev_log_index': prev_log_index
                #'log': log[:prev_log_index][-10:]
            }
            send_msg(reject)
            return

        log_insert_index = prev_log_index + 1
        new_entries = msg['entries']
        log = log[:log_insert_index]
        log.extend(new_entries)

        leader_commit = msg['leader_commit']
        if leader_commit > commit_index:
            commit_index = min(leader_commit, len(log) - 1)

        grant = {
            'src': my_id,
            'dst': msg['src'],
            'leader': leader_id,
            'type': 'grant_append',
            'term': current_term,
            'next_index': len(log)
        }
        if len(msg['entries']) != 0:
            send_msg(grant)
        apply_commits()


def begin_leader_election():
    global current_term
    global server_state
    global voted_for
    global votes
    current_term += 1
    server_state = CANDIDATE
    voted_for = my_id
    votes = []
    votes.append(my_id)
    print('Replica %s has started a new election\n' % my_id)
    for id in replica_ids:
        msg = {
            'src': my_id,
            'dst': id,
            'leader': leader_id,
            'type': 'request_vote',
            'term': current_term,
            'candidate_id': my_id,
            'last_log_index': len(log) - 1,
            'last_log_term': log[len(log) - 1]['term']
        }
        send_msg(msg)


def send_heartbeat():
    for id in replica_ids:
        entries = []
        msg = {
            'src': my_id,
            'dst': id,
            'type': 'append_entries',
            'term': current_term,
            'leader': leader_id,
            'entries': entries
        }
        send_msg(msg)


def handle_msg(msg):
    passed = time.time() - start_time
    print('Replica %s received at %f:\n%s\n' %
          (my_id, passed, json.dumps(msg, indent=2)))
    if msg['type'] == 'get':
        handle_get_msg(msg)
    elif msg['type'] == 'put':
        handle_put_msg(msg)
    elif msg['type'] == 'request_vote':
        handle_request_vote_msg(msg)
    elif msg['type'] == 'grant_vote':
        handle_grant_vote_msg(msg)
    elif msg['type'] == 'reject_vote':
        handle_reject_vote_msg(msg)
    elif msg['type'] == 'append_entries':
        handle_append_entries_msg(msg)
    elif msg['type'] == 'grant_append':
        handle_grant_append_msg(msg)
    elif msg['type'] == 'reject_append':
        handle_reject_append_msg(msg)


# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
sock.connect(my_id)
print('Replica %s is up. Majority: %d. Election timeout: %dms.\n' %
      (my_id, MAJORITY, ELECTION_TIMEOUT))
last_heartbeat = time.time()
last_append = time.time()
start_time = time.time()
while True:
    ready = select.select([sock], [], [], SELECT_WAIT)[0]
    if sock in ready:
        msgs = recv_msgs()
        for msg in msgs:
            handle_msg(msg)
    clock = time.time()
    diff_heartbeat = (clock - last_heartbeat) * 1000
    diff_append = (clock - last_append) * 1000
    if server_state == LEADER and diff_heartbeat >= HEARTBEAT_TIME:
        send_append_entries(replica_ids, False)
        last_heartbeat = time.time()
    elif server_state != LEADER and diff_append >= ELECTION_TIMEOUT:
        begin_leader_election()
        last_append = time.time()
